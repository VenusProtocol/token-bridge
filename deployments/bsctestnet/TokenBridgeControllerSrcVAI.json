{
  "address": "0x91b653f7527D698320133Eb97BB55a617663e792",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "accessControlManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "innerToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "AccountBlacklisted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "AddressesMustDiffer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintLimitExceed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintedAmountExceed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NewCapNotGreaterThanMintedTokens",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddressNotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "BlacklistUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "MintCapChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "MintLimitDecreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newLimit",
          "type": "uint256"
        }
      ],
      "name": "MintLimitIncreased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "source",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "destination",
          "type": "address"
        }
      ],
      "name": "MintedTokensMigrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAccessControlManager",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newAccessControlManager",
          "type": "address"
        }
      ],
      "name": "NewAccessControlManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INNER_TOKEN",
      "outputs": [
        {
          "internalType": "contract IMultichainToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accessControlManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        }
      ],
      "name": "isBlackListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "source_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "destination_",
          "type": "address"
        }
      ],
      "name": "migrateMinterTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minterToCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minterToMintedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAccessControlAddress_",
          "type": "address"
        }
      ],
      "name": "setAccessControlManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "minter_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "setMintCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value_",
          "type": "bool"
        }
      ],
      "name": "updateBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x947a0e80ac95c0e3fdb26e9941d321f76568355474779771adb8d7a3043746a8",
  "receipt": {
    "to": null,
    "from": "0x03862dFa5D0be8F64509C001cb8C6188194469DF",
    "contractAddress": "0x91b653f7527D698320133Eb97BB55a617663e792",
    "transactionIndex": 0,
    "gasUsed": "992143",
    "logsBloom": "0x
    "blockHash": "0xac707d7483c4f6d49661bb137945002ba6d7a33264ee50d5e2a90899f777ec2c",
    "transactionHash": "0x947a0e80ac95c0e3fdb26e9941d321f76568355474779771adb8d7a3043746a8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 37954955,
        "transactionHash": "0x947a0e80ac95c0e3fdb26e9941d321f76568355474779771adb8d7a3043746a8",
        "address": "0x91b653f7527D698320133Eb97BB55a617663e792",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000003862dfa5d0be8f64509c001cb8c6188194469df"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xac707d7483c4f6d49661bb137945002ba6d7a33264ee50d5e2a90899f777ec2c"
      }
    ],
    "blockNumber": 37954955,
    "cumulativeGasUsed": "992143",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x45f8a08F534f34A97187626E05d4b6648Eeaa9AA", "0x5fFbE5302BadED40941A403228E6AD03f93752d9"],
  "numDeployments": 1,
  "solcInputHash": "58b43c0fd8f057a2a735a3cb51d46910",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"accessControlManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"innerToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"AccountBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressesMustDiffer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintLimitExceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintedAmountExceed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewCapNotGreaterThanMintedTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"BlacklistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"MintCapChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"MintLimitDecreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLimit\",\"type\":\"uint256\"}],\"name\":\"MintLimitIncreased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"}],\"name\":\"MintedTokensMigrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAccessControlManager\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAccessControlManager\",\"type\":\"address\"}],\"name\":\"NewAccessControlManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INNER_TOKEN\",\"outputs\":[{\"internalType\":\"contract IMultichainToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accessControlManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"isBlackListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"source_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"migrateMinterTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterToCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minterToMintedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAccessControlAddress_\",\"type\":\"address\"}],\"name\":\"setAccessControlManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"minter_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setMintCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value_\",\"type\":\"bool\"}],\"name\":\"updateBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Venus\",\"kind\":\"dev\",\"methods\":{\"burn(address,uint256)\":{\"custom:access\":\"Controlled by AccessControlManager.\",\"custom:event\":\"Emits MintLimitIncreased with new available limit.\",\"params\":{\"account_\":\"Address from which tokens be destroyed.\",\"amount_\":\"Amount of tokens to be destroyed.\"}},\"decimals()\":{\"returns\":{\"_0\":\"Number of decimals of token\"}},\"isBlackListed(address)\":{\"params\":{\"user_\":\"Address of user to check blacklist status.\"},\"returns\":{\"_0\":\"bool status of blacklist.\"}},\"migrateMinterTokens(address,address)\":{\"custom:access\":\"Controlled by AccessControlManager.\",\"custom:error\":\"MintLimitExceed is thrown when the minting limit exceeds the cap after migration.AddressesMustDiffer is thrown when the source_ and destination_ addresses are the same.\",\"custom:event\":\"Emits MintLimitIncreased and MintLimitDecreased events for 'source' and 'destination'.Emits MintedTokensMigrated.\",\"params\":{\"destination_\":\"Minter address to migrate tokens to.\",\"source_\":\"Minter address to migrate tokens from.\"}},\"mint(address,uint256)\":{\"custom:access\":\"Controlled by AccessControlManager.\",\"custom:error\":\"MintLimitExceed is thrown when minting amount exceeds the maximum cap.\",\"custom:event\":\"Emits MintLimitDecreased with new available limit.\",\"params\":{\"account_\":\"Address to which tokens are assigned.\",\"amount_\":\"Amount of tokens to be assigned.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"custom:access\":\"Controlled by AccessControlManager.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"setAccessControlManager(address)\":{\"custom:access\":\"Only owner.\",\"custom:error\":\"ZeroAddressNotAllowed is thrown when newAccessControlAddress_ contract address is zero.\",\"custom:event\":\"Emits NewAccessControlManager.\",\"details\":\"Admin function to set the access control address.\",\"params\":{\"newAccessControlAddress_\":\"New address for the access control.\"}},\"setMintCap(address,uint256)\":{\"custom:access\":\"Controlled by AccessControlManager.\",\"custom:event\":\"Emits MintCapChanged.\",\"params\":{\"amount_\":\"Cap for the minter.\",\"minter_\":\"Minter address.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"custom:access\":\"Controlled by AccessControlManager.\"},\"updateBlacklist(address,bool)\":{\"custom:access\":\"Controlled by AccessControlManager.\",\"custom:event\":\"Emits BlacklistUpdated event.\",\"params\":{\"user_\":\"User address to be affected.\",\"value_\":\"Boolean to toggle value.\"}}},\"title\":\"TokenBridgeController\",\"version\":1},\"userdoc\":{\"errors\":{\"AccountBlacklisted(address)\":[{\"notice\":\"This error is used to indicate that `mint` `burn` and `transfer` actions are not allowed for the user address.\"}],\"AddressesMustDiffer()\":[{\"notice\":\"This error is used to indicate that the addresses must be different.\"}],\"MintLimitExceed()\":[{\"notice\":\"This error is used to indicate that the minting limit has been exceeded. It is typically thrown when a minting operation would surpass the defined cap.\"}],\"MintedAmountExceed()\":[{\"notice\":\"This error is used to indicate that the minter did not mint the required amount of tokens.\"}],\"NewCapNotGreaterThanMintedTokens()\":[{\"notice\":\"This error is used to indicate that the new cap is greater than the previously minted tokens for the minter.\"}],\"Unauthorized()\":[{\"notice\":\"This error is used to indicate that sender is not allowed to perform this action.\"}],\"ZeroAddressNotAllowed()\":[{\"notice\":\"Thrown if the supplied address is a zero address where it is not allowed\"}]},\"events\":{\"BlacklistUpdated(address,bool)\":{\"notice\":\"Emitted when the blacklist status of a user is updated.\"},\"MintCapChanged(address,uint256)\":{\"notice\":\"Emitted when the minting cap for a minter is changed.\"},\"MintLimitDecreased(address,uint256)\":{\"notice\":\"Emitted when the minting limit for a minter is decreased.\"},\"MintLimitIncreased(address,uint256)\":{\"notice\":\"Emitted when the minting limit for a minter is increased.\"},\"MintedTokensMigrated(address,address)\":{\"notice\":\"Emitted when all minted tokens are migrated from one minter to another.\"},\"NewAccessControlManager(address,address)\":{\"notice\":\"Emitted when the address of the access control manager of the contract is updated.\"}},\"kind\":\"user\",\"methods\":{\"INNER_TOKEN()\":{\"notice\":\"Address of the token which is controlled by this contract.\"},\"accessControlManager()\":{\"notice\":\"Access control manager contract address.\"},\"burn(address,uint256)\":{\"notice\":\"Destroys `amount_` tokens from `account_`, reducing the total supply. Checks access and eligibility.\"},\"decimals()\":{\"notice\":\"Returns number of decimals of token\"},\"isBlackListed(address)\":{\"notice\":\"Returns the blacklist status of the address.\"},\"migrateMinterTokens(address,address)\":{\"notice\":\"Migrates all minted tokens from one minter to another. This function is useful when we want to permanent take down a bridge.\"},\"mint(address,uint256)\":{\"notice\":\"Creates `amount_` tokens and assigns them to `account_`, increasing the total supply. Checks access and eligibility.\"},\"minterToCap(address)\":{\"notice\":\"A mapping is used to keep track of the maximum amount a minter is permitted to mint.\"},\"minterToMintedAmount(address)\":{\"notice\":\"A Mapping used to keep track of the amount i.e already minted by minter.\"},\"pause()\":{\"notice\":\"Pauses Token\"},\"setAccessControlManager(address)\":{\"notice\":\"Sets the address of the access control manager of this contract.\"},\"setMintCap(address,uint256)\":{\"notice\":\"Sets the minting cap for minter.\"},\"unpause()\":{\"notice\":\"Resumes Token\"},\"updateBlacklist(address,bool)\":{\"notice\":\"Function to update blacklist.\"}},\"notice\":\"TokenBridgeController contract serves as a intermidiary contract between bridge and token. It controls the mint and burn operation via bridge contract.  It also incorporates access control features provided by the \\\"TokenController\\\" contract to ensure proper governance and restrictions on minting and burning operations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Token/TokenBridgeController.sol\":\"TokenBridgeController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\n/**\\n * @title IAccessControlManagerV8\\n * @author Venus\\n * @notice Interface implemented by the `AccessControlManagerV8` contract.\\n */\\ninterface IAccessControlManagerV8 is IAccessControl {\\n    function giveCallPermission(address contractAddress, string calldata functionSig, address accountToPermit) external;\\n\\n    function revokeCallPermission(\\n        address contractAddress,\\n        string calldata functionSig,\\n        address accountToRevoke\\n    ) external;\\n\\n    function isAllowedToCall(address account, string calldata functionSig) external view returns (bool);\\n\\n    function hasPermission(\\n        address account,\\n        address contractAddress,\\n        string calldata functionSig\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x8adbe291d659987faf4de606736227ad9d8e1a0e284a33a6ca12b30ab2a504b2\",\"license\":\"BSD-3-Clause\"},\"@venusprotocol/solidity-utilities/contracts/validators.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/// @notice Thrown if the supplied address is a zero address where it is not allowed\\nerror ZeroAddressNotAllowed();\\n\\n/// @notice Checks if the provided address is nonzero, reverts otherwise\\n/// @param address_ Address to check\\n/// @custom:error ZeroAddressNotAllowed is thrown if the provided address is a zero address\\nfunction ensureNonzeroAddress(address address_) pure {\\n    if (address_ == address(0)) {\\n        revert ZeroAddressNotAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x909eb76841ebd57d8f53686b76b1a09da7bbbbcddb29510c41674d5aa84c713e\",\"license\":\"BSD-3-Clause\"},\"contracts/Token/TokenBridgeController.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\nimport { IMultichainToken } from \\\"./../interfaces/IMultichainToken.sol\\\";\\nimport { MultichainTokenController } from \\\"./utils/MultichainTokenController.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\n\\n/**\\n * @title TokenBridgeController\\n * @author Venus\\n * @notice TokenBridgeController contract serves as a intermidiary contract between bridge and token. It controls the mint and burn operation via bridge contract.\\n *  It also incorporates access control features provided by the \\\"TokenController\\\" contract to ensure proper governance and restrictions on minting and burning operations.\\n */\\n\\ncontract TokenBridgeController is MultichainTokenController {\\n    /**\\n     * @notice Address of the token which is controlled by this contract.\\n     */\\n    IMultichainToken public immutable INNER_TOKEN;\\n\\n    constructor(address accessControlManager_, address innerToken_) MultichainTokenController(accessControlManager_) {\\n        ensureNonzeroAddress(innerToken_);\\n        INNER_TOKEN = IMultichainToken(innerToken_);\\n    }\\n\\n    /**\\n     * @notice Creates `amount_` tokens and assigns them to `account_`, increasing\\n     * the total supply. Checks access and eligibility.\\n     * @param account_ Address to which tokens are assigned.\\n     * @param amount_ Amount of tokens to be assigned.\\n     * @custom:access Controlled by AccessControlManager.\\n     * @custom:event Emits MintLimitDecreased with new available limit.\\n     * @custom:error MintLimitExceed is thrown when minting amount exceeds the maximum cap.\\n     */\\n    function mint(address account_, uint256 amount_) external whenNotPaused {\\n        _ensureAllowed(\\\"mint(address,uint256)\\\");\\n        _beforeTokenTransfer(msg.sender, account_);\\n        _isEligibleToMint(msg.sender, amount_);\\n        INNER_TOKEN.mint(account_, amount_);\\n    }\\n\\n    /**\\n     * @notice Destroys `amount_` tokens from `account_`, reducing the\\n     * total supply. Checks access and eligibility.\\n     * @param account_ Address from which tokens be destroyed.\\n     * @param amount_ Amount of tokens to be destroyed.\\n     * @custom:access Controlled by AccessControlManager.\\n     * @custom:event Emits MintLimitIncreased with new available limit.\\n     */\\n    function burn(address account_, uint256 amount_) external whenNotPaused {\\n        _ensureAllowed(\\\"burn(address,uint256)\\\");\\n        _beforeTokenTransfer(msg.sender, account_);\\n        INNER_TOKEN.burn(account_, amount_);\\n        _increaseMintLimit(msg.sender, amount_);\\n    }\\n\\n    /**\\n     * @notice Returns number of decimals of token\\n     * @return Number of decimals of token\\n     */\\n    function decimals() public view returns (uint8) {\\n        return INNER_TOKEN.decimals();\\n    }\\n\\n    /**\\n     * @notice Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     * @param from_ Address of account from which tokens are to be transferred.\\n     * @param to_ Address of the account to which tokens are to be transferred.\\n     * @custom:error AccountBlacklisted is thrown when either `from` or `to` address is blacklisted.\\n     */\\n    function _beforeTokenTransfer(address from_, address to_) internal view whenNotPaused {\\n        if (_blacklist[to_]) {\\n            revert AccountBlacklisted(to_);\\n        }\\n        if (_blacklist[from_]) {\\n            revert AccountBlacklisted(from_);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xefc761e00b9892e2248fcd164db9a03f9f93a052fb0ff05e99d6d97a9fc28cfb\",\"license\":\"BSD-3-Clause\"},\"contracts/Token/utils/MultichainTokenController.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\nimport { IAccessControlManagerV8 } from \\\"@venusprotocol/governance-contracts/contracts/Governance/IAccessControlManagerV8.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ensureNonzeroAddress } from \\\"@venusprotocol/solidity-utilities/contracts/validators.sol\\\";\\n\\n/**\\n * @title MultichainTokenController\\n * @author Venus\\n * @notice MultichainTokenController contract acts as a governance and access control mechanism,\\n * allowing the owner to manage minting restrictions and blacklist certain addresses to maintain control and security within the token ecosystem.\\n * It provides a flexible framework for token-related operations.\\n */\\n\\ncontract MultichainTokenController is Ownable, Pausable {\\n    /**\\n     * @notice Access control manager contract address.\\n     */\\n    address public accessControlManager;\\n    /**\\n     * @notice A Mapping used to keep track of the blacklist status of addresses.\\n     */\\n    mapping(address => bool) internal _blacklist;\\n    /**\\n     * @notice A mapping is used to keep track of the maximum amount a minter is permitted to mint.\\n     */\\n    mapping(address => uint256) public minterToCap;\\n    /**\\n     * @notice A Mapping used to keep track of the amount i.e already minted by minter.\\n     */\\n    mapping(address => uint256) public minterToMintedAmount;\\n\\n    /**\\n     * @notice Emitted when the blacklist status of a user is updated.\\n     */\\n    event BlacklistUpdated(address indexed user, bool value);\\n    /**\\n     * @notice Emitted when the minting limit for a minter is increased.\\n     */\\n    event MintLimitIncreased(address indexed minter, uint256 newLimit);\\n    /**\\n     * @notice Emitted when the minting limit for a minter is decreased.\\n     */\\n    event MintLimitDecreased(address indexed minter, uint256 newLimit);\\n    /**\\n     * @notice Emitted when the minting cap for a minter is changed.\\n     */\\n    event MintCapChanged(address indexed minter, uint256 amount);\\n    /**\\n     * @notice Emitted when the address of the access control manager of the contract is updated.\\n     */\\n    event NewAccessControlManager(address indexed oldAccessControlManager, address indexed newAccessControlManager);\\n    /**\\n     * @notice Emitted when all minted tokens are migrated from one minter to another.\\n     */\\n    event MintedTokensMigrated(address indexed source, address indexed destination);\\n\\n    /**\\n     * @notice This error is used to indicate that the minting limit has been exceeded. It is typically thrown when a minting operation would surpass the defined cap.\\n     */\\n    error MintLimitExceed();\\n    /**\\n     * @notice This error is used to indicate that `mint` `burn` and `transfer` actions are not allowed for the user address.\\n     */\\n    error AccountBlacklisted(address user);\\n    /**\\n     * @notice This error is used to indicate that sender is not allowed to perform this action.\\n     */\\n    error Unauthorized();\\n    /**\\n     * @notice This error is used to indicate that the new cap is greater than the previously minted tokens for the minter.\\n     */\\n    error NewCapNotGreaterThanMintedTokens();\\n    /**\\n     * @notice This error is used to indicate that the addresses must be different.\\n     */\\n    error AddressesMustDiffer();\\n    /**\\n     * @notice This error is used to indicate that the minter did not mint the required amount of tokens.\\n     */\\n    error MintedAmountExceed();\\n\\n    /**\\n     * @param accessControlManager_ Address of access control manager contract.\\n     * @custom:error ZeroAddressNotAllowed is thrown when accessControlManager contract address is zero.\\n     */\\n    constructor(address accessControlManager_) {\\n        ensureNonzeroAddress(accessControlManager_);\\n        accessControlManager = accessControlManager_;\\n    }\\n\\n    /**\\n     * @notice Pauses Token\\n     * @custom:access Controlled by AccessControlManager.\\n     */\\n    function pause() external {\\n        _ensureAllowed(\\\"pause()\\\");\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Resumes Token\\n     * @custom:access Controlled by AccessControlManager.\\n     */\\n    function unpause() external {\\n        _ensureAllowed(\\\"unpause()\\\");\\n        _unpause();\\n    }\\n\\n    /**\\n     * @notice Function to update blacklist.\\n     * @param user_ User address to be affected.\\n     * @param value_ Boolean to toggle value.\\n     * @custom:access Controlled by AccessControlManager.\\n     * @custom:event Emits BlacklistUpdated event.\\n     */\\n    function updateBlacklist(address user_, bool value_) external {\\n        _ensureAllowed(\\\"updateBlacklist(address,bool)\\\");\\n        _blacklist[user_] = value_;\\n        emit BlacklistUpdated(user_, value_);\\n    }\\n\\n    /**\\n     * @notice Sets the minting cap for minter.\\n     * @param minter_ Minter address.\\n     * @param amount_ Cap for the minter.\\n     * @custom:access Controlled by AccessControlManager.\\n     * @custom:event Emits MintCapChanged.\\n     */\\n    function setMintCap(address minter_, uint256 amount_) external {\\n        _ensureAllowed(\\\"setMintCap(address,uint256)\\\");\\n\\n        if (amount_ < minterToMintedAmount[minter_]) {\\n            revert NewCapNotGreaterThanMintedTokens();\\n        }\\n\\n        minterToCap[minter_] = amount_;\\n        emit MintCapChanged(minter_, amount_);\\n    }\\n\\n    /**\\n     * @notice Sets the address of the access control manager of this contract.\\n     * @dev Admin function to set the access control address.\\n     * @param newAccessControlAddress_ New address for the access control.\\n     * @custom:access Only owner.\\n     * @custom:event Emits NewAccessControlManager.\\n     * @custom:error ZeroAddressNotAllowed is thrown when newAccessControlAddress_ contract address is zero.\\n     */\\n    function setAccessControlManager(address newAccessControlAddress_) external onlyOwner {\\n        ensureNonzeroAddress(newAccessControlAddress_);\\n        emit NewAccessControlManager(accessControlManager, newAccessControlAddress_);\\n        accessControlManager = newAccessControlAddress_;\\n    }\\n\\n    /**\\n     * @notice Migrates all minted tokens from one minter to another. This function is useful when we want to permanent take down a bridge.\\n     * @param source_ Minter address to migrate tokens from.\\n     * @param destination_ Minter address to migrate tokens to.\\n     * @custom:access Controlled by AccessControlManager.\\n     * @custom:error MintLimitExceed is thrown when the minting limit exceeds the cap after migration.\\n     * @custom:error AddressesMustDiffer is thrown when the source_ and destination_ addresses are the same.\\n     * @custom:event Emits MintLimitIncreased and MintLimitDecreased events for 'source' and 'destination'.\\n     * @custom:event Emits MintedTokensMigrated.\\n     */\\n    function migrateMinterTokens(address source_, address destination_) external {\\n        _ensureAllowed(\\\"migrateMinterTokens(address,address)\\\");\\n\\n        if (source_ == destination_) {\\n            revert AddressesMustDiffer();\\n        }\\n\\n        uint256 sourceCap = minterToCap[source_];\\n        uint256 destinationCap = minterToCap[destination_];\\n\\n        uint256 sourceMinted = minterToMintedAmount[source_];\\n        uint256 destinationMinted = minterToMintedAmount[destination_];\\n        uint256 newDestinationMinted = destinationMinted + sourceMinted;\\n\\n        if (newDestinationMinted > destinationCap) {\\n            revert MintLimitExceed();\\n        }\\n\\n        minterToMintedAmount[source_] = 0;\\n        minterToMintedAmount[destination_] = newDestinationMinted;\\n        uint256 availableLimit;\\n        unchecked {\\n            availableLimit = destinationCap - newDestinationMinted;\\n        }\\n\\n        emit MintLimitDecreased(destination_, availableLimit);\\n        emit MintLimitIncreased(source_, sourceCap);\\n        emit MintedTokensMigrated(source_, destination_);\\n    }\\n\\n    /**\\n     * @notice Returns the blacklist status of the address.\\n     * @param user_ Address of user to check blacklist status.\\n     * @return bool status of blacklist.\\n     */\\n    function isBlackListed(address user_) external view returns (bool) {\\n        return _blacklist[user_];\\n    }\\n\\n    /**\\n     * @dev Checks the minter cap and eligibility of receiver to receive tokens.\\n     * @param from_  Minter address.\\n     * @param amount_  Amount to be mint.\\n     * @custom:error MintLimitExceed is thrown when minting limit exceeds the cap.\\n     * @custom:event Emits MintLimitDecreased with minter address and available limits.\\n     */\\n    function _isEligibleToMint(address from_, uint256 amount_) internal {\\n        uint256 mintingCap = minterToCap[from_];\\n        uint256 totalMintedOld = minterToMintedAmount[from_];\\n        uint256 totalMintedNew = totalMintedOld + amount_;\\n\\n        if (totalMintedNew > mintingCap) {\\n            revert MintLimitExceed();\\n        }\\n        minterToMintedAmount[from_] = totalMintedNew;\\n        uint256 availableLimit;\\n        unchecked {\\n            availableLimit = mintingCap - totalMintedNew;\\n        }\\n        emit MintLimitDecreased(from_, availableLimit);\\n    }\\n\\n    /**\\n     * @dev This is post hook of burn function, increases minting limit of the minter.\\n     * @param from_ Minter address.\\n     * @param amount_  Amount burned.\\n     * @custom:error MintedAmountExceed is thrown when `amount_` is greater than the tokens minted by `from_`.\\n     * @custom:event Emits MintLimitIncreased with minter address and availabe limit.\\n     */\\n    function _increaseMintLimit(address from_, uint256 amount_) internal {\\n        uint256 totalMintedOld = minterToMintedAmount[msg.sender];\\n        uint256 amountToIncrease = totalMintedOld >= amount_ ? amount_ : totalMintedOld;\\n\\n        uint256 totalMintedNew;\\n        unchecked {\\n            totalMintedNew = totalMintedOld - amountToIncrease;\\n        }\\n        minterToMintedAmount[from_] = totalMintedNew;\\n        uint256 availableLimit = minterToCap[from_] - totalMintedNew;\\n        emit MintLimitIncreased(from_, availableLimit);\\n    }\\n\\n    /**\\n     * @dev Checks the caller is allowed to call the specified fuction.\\n     * @param functionSig_ Function signatureon which access is to be checked.\\n     * @custom:error Unauthorized, thrown when unauthorised user try to access function.\\n     */\\n    function _ensureAllowed(string memory functionSig_) internal view {\\n        if (!IAccessControlManagerV8(accessControlManager).isAllowedToCall(msg.sender, functionSig_)) {\\n            revert Unauthorized();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8ab651dab74aa2f502a77bbad0f5b66962542fdf0f404f7e214c837efb7affed\",\"license\":\"BSD-3-Clause\"},\"contracts/interfaces/IMultichainToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity 0.8.13;\\n\\n/**\\n * @title IMultichainToken\\n * @author Venus\\n * @notice Interface implemented by `MultichainToken`.\\n */\\ninterface IMultichainToken {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xc5cc1d25e7e6dd673b45f386274b0aa94536505d89a1bec4719a69feb4d92454\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638da5cb5b116100a2578063c06abe7711610071578063c06abe7714610244578063d89e2dac14610257578063e47d60601461026a578063f2fde38b14610296578063ff2951f9146102a957600080fd5b80638da5cb5b146101e65780639155e0831461020b5780639dc29fac1461021e578063b4a0bdf31461023157600080fd5b806340c10f19116100e957806340c10f19146101855780635c975abb14610198578063715018a6146101b65780637b517334146101be5780638456cb59146101de57600080fd5b80630e32cb861461011b578063313ce56714610130578063391efe121461014f5780633f4ba83a1461017d575b600080fd5b61012e610129366004610e03565b6102d0565b005b61013861033d565b60405160ff90911681526020015b60405180910390f35b61016f61015d366004610e03565b60036020526000908152604090205481565b604051908152602001610146565b61012e6103c6565b61012e610193366004610e25565b6103fa565b600054600160a01b900460ff165b6040519015158152602001610146565b61012e6104d2565b61016f6101cc366004610e03565b60046020526000908152604090205481565b61012e6104e4565b6000546001600160a01b03165b6040516001600160a01b039091168152602001610146565b61012e610219366004610e5d565b610514565b61012e61022c366004610e25565b6105b2565b6001546101f3906001600160a01b031681565b61012e610252366004610e25565b61068a565b61012e610265366004610e94565b61074e565b6101a6610278366004610e03565b6001600160a01b031660009081526002602052604090205460ff1690565b61012e6102a4366004610e03565b6108f6565b6101f37f000000000000000000000000000000000000000000000000000000000000000081565b6102d8610974565b6102e1816109ce565b6001546040516001600160a01b038084169216907f66fd58e82f7b31a2a5c30e0888f3093efe4e111b00cd2b0c31fe014601293aa090600090a3600180546001600160a01b0319166001600160a01b0392909216919091179055565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561039d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c19190610ec7565b905090565b6103f060405180604001604052806009815260200168756e7061757365282960b81b8152506109f5565b6103f8610a84565b565b610402610ad9565b610438604051806040016040528060158152602001746d696e7428616464726573732c75696e743235362960581b8152506109f5565b6104423383610b26565b61044c3382610bb8565b6040516340c10f1960e01b81526001600160a01b038381166004830152602482018390527f000000000000000000000000000000000000000000000000000000000000000016906340c10f1990604401600060405180830381600087803b1580156104b657600080fd5b505af11580156104ca573d6000803e3d6000fd5b505050505050565b6104da610974565b6103f86000610c6d565b61050c604051806040016040528060078152602001667061757365282960c81b8152506109f5565b6103f8610cbd565b6105526040518060400160405280601d81526020017f757064617465426c61636b6c69737428616464726573732c626f6f6c290000008152506109f5565b6001600160a01b038216600081815260026020908152604091829020805460ff191685151590811790915591519182527f6a12b3df6cba4203bd7fd06b816789f87de8c594299aed5717ae070fac781bac91015b60405180910390a25050565b6105ba610ad9565b6105f0604051806040016040528060158152602001746275726e28616464726573732c75696e743235362960581b8152506109f5565b6105fa3383610b26565b604051632770a7eb60e21b81526001600160a01b038381166004830152602482018390527f00000000000000000000000000000000000000000000000000000000000000001690639dc29fac90604401600060405180830381600087803b15801561066457600080fd5b505af1158015610678573d6000803e3d6000fd5b505050506106863382610d00565b5050565b6106c86040518060400160405280601b81526020017f7365744d696e7443617028616464726573732c75696e743235362900000000008152506109f5565b6001600160a01b0382166000908152600460205260409020548110156107015760405163ce89973d60e01b815260040160405180910390fd5b6001600160a01b03821660008181526003602052604090819020839055517f01a85f4ecff52e70907e25b863010bca98a9458d9f2fe9b3efb4c47d197e6448906105a69084815260200190565b61076f604051806060016040528060248152602001610fb2602491396109f5565b806001600160a01b0316826001600160a01b0316036107a1576040516380ae98f560e01b815260040160405180910390fd5b6001600160a01b038083166000818152600360209081526040808320549486168084528184205494845260049092528083205491835282205490916107e68383610f00565b90508381111561080957604051634f2dbd1d60e01b815260040160405180910390fd5b6001600160a01b038781166000908152600460209081526040808320839055928916808352918390208490559151838703808252927fbe214d1fa2403a39be9a36c9f4b45125eba30bf27a8b56a619baf00493ad3e61910160405180910390a2876001600160a01b03167f0831a8ba59684daef8a957d2bd2d943e233993771429e9a17b71ddb1cea35cdb876040516108a491815260200190565b60405180910390a2866001600160a01b0316886001600160a01b03167f63ce671e4a37975f0a9e340f6f72320c617a5f728b83e3860b03aa847dc26ebb60405160405180910390a35050505050505050565b6108fe610974565b6001600160a01b0381166109685760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61097181610c6d565b50565b6000546001600160a01b031633146103f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161095f565b6001600160a01b038116610971576040516342bcdf7f60e11b815260040160405180910390fd5b6001546040516318c5e8ab60e01b81526001600160a01b03909116906318c5e8ab90610a279033908590600401610f18565b602060405180830381865afa158015610a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a689190610f7d565b610971576040516282b42960e81b815260040160405180910390fd5b610a8c610d97565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156103f85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161095f565b610b2e610ad9565b6001600160a01b03811660009081526002602052604090205460ff1615610b735760405163571f7b4960e01b81526001600160a01b038216600482015260240161095f565b6001600160a01b03821660009081526002602052604090205460ff16156106865760405163571f7b4960e01b81526001600160a01b038316600482015260240161095f565b6001600160a01b03821660009081526003602090815260408083205460049092528220549091610be88483610f00565b905082811115610c0b57604051634f2dbd1d60e01b815260040160405180910390fd5b6001600160a01b038516600081815260046020526040908190208390555182850391907fbe214d1fa2403a39be9a36c9f4b45125eba30bf27a8b56a619baf00493ad3e6190610c5d9084815260200190565b60405180910390a2505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610cc5610ad9565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610abc3390565b336000908152600460205260408120549082821015610d1f5781610d21565b825b6001600160a01b038516600090815260046020908152604080832084870390819055600390925282205492935091610d5a908390610f9a565b9050856001600160a01b03167f0831a8ba59684daef8a957d2bd2d943e233993771429e9a17b71ddb1cea35cdb82604051610c5d91815260200190565b600054600160a01b900460ff166103f85760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161095f565b80356001600160a01b0381168114610dfe57600080fd5b919050565b600060208284031215610e1557600080fd5b610e1e82610de7565b9392505050565b60008060408385031215610e3857600080fd5b610e4183610de7565b946020939093013593505050565b801515811461097157600080fd5b60008060408385031215610e7057600080fd5b610e7983610de7565b91506020830135610e8981610e4f565b809150509250929050565b60008060408385031215610ea757600080fd5b610eb083610de7565b9150610ebe60208401610de7565b90509250929050565b600060208284031215610ed957600080fd5b815160ff81168114610e1e57600080fd5b634e487b7160e01b600052601160045260246000fd5b60008219821115610f1357610f13610eea565b500190565b60018060a01b038316815260006020604081840152835180604085015260005b81811015610f5457858101830151858201606001528201610f38565b81811115610f66576000606083870101525b50601f01601f191692909201606001949350505050565b600060208284031215610f8f57600080fd5b8151610e1e81610e4f565b600082821015610fac57610fac610eea565b50039056fe6d6967726174654d696e746572546f6b656e7328616464726573732c6164647265737329a26469706673582212200d794b0e66e6eb82ad3e20fa23b934fe1c4feecf39a3125d64fcdb3fd35f2d5864736f6c634300080d0033",
  "devdoc": {
    "author": "Venus",
    "kind": "dev",
    "methods": {
      "burn(address,uint256)": {
        "custom:access": "Controlled by AccessControlManager.",
        "custom:event": "Emits MintLimitIncreased with new available limit.",
        "params": {
          "account_": "Address from which tokens be destroyed.",
          "amount_": "Amount of tokens to be destroyed."
        }
      },
      "decimals()": {
        "returns": {
          "_0": "Number of decimals of token"
        }
      },
      "isBlackListed(address)": {
        "params": {
          "user_": "Address of user to check blacklist status."
        },
        "returns": {
          "_0": "bool status of blacklist."
        }
      },
      "migrateMinterTokens(address,address)": {
        "custom:access": "Controlled by AccessControlManager.",
        "custom:error": "MintLimitExceed is thrown when the minting limit exceeds the cap after migration.AddressesMustDiffer is thrown when the source_ and destination_ addresses are the same.",
        "custom:event": "Emits MintLimitIncreased and MintLimitDecreased events for 'source' and 'destination'.Emits MintedTokensMigrated.",
        "params": {
          "destination_": "Minter address to migrate tokens to.",
          "source_": "Minter address to migrate tokens from."
        }
      },
      "mint(address,uint256)": {
        "custom:access": "Controlled by AccessControlManager.",
        "custom:error": "MintLimitExceed is thrown when minting amount exceeds the maximum cap.",
        "custom:event": "Emits MintLimitDecreased with new available limit.",
        "params": {
          "account_": "Address to which tokens are assigned.",
          "amount_": "Amount of tokens to be assigned."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "custom:access": "Controlled by AccessControlManager."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "setAccessControlManager(address)": {
        "custom:access": "Only owner.",
        "custom:error": "ZeroAddressNotAllowed is thrown when newAccessControlAddress_ contract address is zero.",
        "custom:event": "Emits NewAccessControlManager.",
        "details": "Admin function to set the access control address.",
        "params": {
          "newAccessControlAddress_": "New address for the access control."
        }
      },
      "setMintCap(address,uint256)": {
        "custom:access": "Controlled by AccessControlManager.",
        "custom:event": "Emits MintCapChanged.",
        "params": {
          "amount_": "Cap for the minter.",
          "minter_": "Minter address."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "custom:access": "Controlled by AccessControlManager."
      },
      "updateBlacklist(address,bool)": {
        "custom:access": "Controlled by AccessControlManager.",
        "custom:event": "Emits BlacklistUpdated event.",
        "params": {
          "user_": "User address to be affected.",
          "value_": "Boolean to toggle value."
        }
      }
    },
    "title": "TokenBridgeController",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "AccountBlacklisted(address)": [
        {
          "notice": "This error is used to indicate that `mint` `burn` and `transfer` actions are not allowed for the user address."
        }
      ],
      "AddressesMustDiffer()": [
        {
          "notice": "This error is used to indicate that the addresses must be different."
        }
      ],
      "MintLimitExceed()": [
        {
          "notice": "This error is used to indicate that the minting limit has been exceeded. It is typically thrown when a minting operation would surpass the defined cap."
        }
      ],
      "MintedAmountExceed()": [
        {
          "notice": "This error is used to indicate that the minter did not mint the required amount of tokens."
        }
      ],
      "NewCapNotGreaterThanMintedTokens()": [
        {
          "notice": "This error is used to indicate that the new cap is greater than the previously minted tokens for the minter."
        }
      ],
      "Unauthorized()": [
        {
          "notice": "This error is used to indicate that sender is not allowed to perform this action."
        }
      ],
      "ZeroAddressNotAllowed()": [
        {
          "notice": "Thrown if the supplied address is a zero address where it is not allowed"
        }
      ]
    },
    "events": {
      "BlacklistUpdated(address,bool)": {
        "notice": "Emitted when the blacklist status of a user is updated."
      },
      "MintCapChanged(address,uint256)": {
        "notice": "Emitted when the minting cap for a minter is changed."
      },
      "MintLimitDecreased(address,uint256)": {
        "notice": "Emitted when the minting limit for a minter is decreased."
      },
      "MintLimitIncreased(address,uint256)": {
        "notice": "Emitted when the minting limit for a minter is increased."
      },
      "MintedTokensMigrated(address,address)": {
        "notice": "Emitted when all minted tokens are migrated from one minter to another."
      },
      "NewAccessControlManager(address,address)": {
        "notice": "Emitted when the address of the access control manager of the contract is updated."
      }
    },
    "kind": "user",
    "methods": {
      "INNER_TOKEN()": {
        "notice": "Address of the token which is controlled by this contract."
      },
      "accessControlManager()": {
        "notice": "Access control manager contract address."
      },
      "burn(address,uint256)": {
        "notice": "Destroys `amount_` tokens from `account_`, reducing the total supply. Checks access and eligibility."
      },
      "decimals()": {
        "notice": "Returns number of decimals of token"
      },
      "isBlackListed(address)": {
        "notice": "Returns the blacklist status of the address."
      },
      "migrateMinterTokens(address,address)": {
        "notice": "Migrates all minted tokens from one minter to another. This function is useful when we want to permanent take down a bridge."
      },
      "mint(address,uint256)": {
        "notice": "Creates `amount_` tokens and assigns them to `account_`, increasing the total supply. Checks access and eligibility."
      },
      "minterToCap(address)": {
        "notice": "A mapping is used to keep track of the maximum amount a minter is permitted to mint."
      },
      "minterToMintedAmount(address)": {
        "notice": "A Mapping used to keep track of the amount i.e already minted by minter."
      },
      "pause()": {
        "notice": "Pauses Token"
      },
      "setAccessControlManager(address)": {
        "notice": "Sets the address of the access control manager of this contract."
      },
      "setMintCap(address,uint256)": {
        "notice": "Sets the minting cap for minter."
      },
      "unpause()": {
        "notice": "Resumes Token"
      },
      "updateBlacklist(address,bool)": {
        "notice": "Function to update blacklist."
      }
    },
    "notice": "TokenBridgeController contract serves as a intermidiary contract between bridge and token. It controls the mint and burn operation via bridge contract.  It also incorporates access control features provided by the \"TokenController\" contract to ensure proper governance and restrictions on minting and burning operations.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4604,
        "contract": "contracts/Token/TokenBridgeController.sol:TokenBridgeController",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4727,
        "contract": "contracts/Token/TokenBridgeController.sol:TokenBridgeController",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9958,
        "contract": "contracts/Token/TokenBridgeController.sol:TokenBridgeController",
        "label": "accessControlManager",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 9963,
        "contract": "contracts/Token/TokenBridgeController.sol:TokenBridgeController",
        "label": "_blacklist",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 9968,
        "contract": "contracts/Token/TokenBridgeController.sol:TokenBridgeController",
        "label": "minterToCap",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 9973,
        "contract": "contracts/Token/TokenBridgeController.sol:TokenBridgeController",
        "label": "minterToMintedAmount",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
